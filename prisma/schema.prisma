// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  noAtomicOperations     = true
  // useInputType_WhereInput_ALL = "WhereInput"
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/@generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Reason {
  OFFENSIVE
  TABOO
  OTHER
}

enum Role {
  ADMIN
  USER
  GUEST
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

// model Region {
//   id         Int     @id @default(autoincrement())
//   name       String  @unique
//   address    String?
//   postalCode Int?
//   users      User[]
// }

model User {
  id            Int      @id @default(autoincrement())
  /// @Validator.MinLength(3)
  username      String   @unique @db.VarChar(255)
  /// @Validator.IsEmail()
  email         String   @unique @db.VarChar(255)
  // TODO: @Validator.MinLength(8)
  // TODO: @Validator.MaxLength(15)
  password      String?
  name          String?
  role          Role     @default(USER)
  isU18         Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(dbgenerated("NOW()"))
  updatedAt     DateTime @default(dbgenerated("NOW()"))
  googleId      String?  @unique
  googleProfile Json?
  posts         Post[]
  country       Country? @relation(fields: [countryId], references: [id])
  countryId     Int?
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  published     Boolean?  @default(false)
  likesCount    Int       @default(1)
  dislikesCount Int       @default(0)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  isU18         Boolean   @default(true)
  createdAt     DateTime  @default(dbgenerated("NOW()"))
  updatedAt     DateTime  @default(dbgenerated("NOW()"))
  examples      Example[]
  // tags           Tag[]
  // flags          Flag[]
}

// model Tag {
//   id      Int    @id @default(autoincrement())
//   name    String @unique
//   post    Post?  @relation(fields: [postId], references: [id])
//   postId Int?
// }

model Example {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(dbgenerated("NOW()"))
  updatedAt DateTime @default(dbgenerated("NOW()"))
}

// model Flag {
//   id         Int      @id @default(autoincrement())
//   reason     Reason
//   Post       Post?    @relation(fields: [postId], references: [id])
//   postId     Int?
//   createdAt DateTime @default(dbgenerated("NOW()"))
// }
