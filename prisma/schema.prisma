// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator nestgraphql {
  provider                    = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                      = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from       = "class-validator"
  fields_Validator_input      = true
  useInputType_WhereInput_ALL = "WhereInput"
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/@generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Reason {
  OFFENSIVE
  TABOO
  OTHER
}

enum Role {
  ADMIN
  USER
  GUEST
}

// model Country {
//   id      Int      @id @default(autoincrement())
//   name    String   @unique
//   regions Region[]
// }

// model Region {
//   id          Int      @id @default(autoincrement())
//   name        String   @unique
//   address     String?
//   postal_code Int?
//   users       User[]
//   Country     Country? @relation(fields: [countryId], references: [id])
//   countryId   Int?
// }

model User {
  id             Int      @id @default(autoincrement())
  /// @Validator.MinLength(3)
  username       String   @unique
  /// @Validator.IsEmail()
  email          String   @unique
  password       String?
  name           String?
  role           Role
  is_u_18        Boolean  @default(true)
  email_verified Boolean  @default(false)
  created_at     DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  updated_at     DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  google_id      String?  @unique
  google_profile Json?
  posts          Post[]
  // Region     Region?  @relation(fields: [regionId], references: [id])
  // regionId   Int?
}

model Post {
  id             Int      @id @default(autoincrement())
  title          String
  content        String
  published      Boolean? @default(false)
  likes_count    Int      @default(1)
  dislikes_count Int      @default(0)
  author         User     @relation(fields: [author_id], references: [id])
  author_id      Int
  // tags           Tag[]
  is_u_18        Boolean  @default(true)
  created_at     DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  updated_at     DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  // examples       Example[]
  // flags          Flag[]
}

// model Tag {
//   id     Int    @id @default(autoincrement())
//   name   String @unique
//   Post   Post?  @relation(fields: [postId], references: [id])
//   postId Int?
// }

// model Example {
//   id         Int      @id @default(autoincrement())
//   content    String
//   Post       Post     @relation(fields: [postId], references: [id])
//   postId     Int
//   created_at DateTime @default(dbgenerated("NOW() + interval '1 year'"))
//   updated_at DateTime @default(dbgenerated("NOW() + interval '1 year'"))
// }

// model Flag {
//   id         Int      @id @default(autoincrement())
//   reason     Reason
//   Post       Post?    @relation(fields: [postId], references: [id])
//   postId     Int?
//   created_at DateTime @default(dbgenerated("NOW() + interval '1 year'"))
// }
