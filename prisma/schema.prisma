// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  noAtomicOperations     = true
  // useInputType_WhereInput_ALL = "WhereInput"
  decorate_1_type        = "UserUncheckedUpdateInput"
  decorate_1_field       = "!(id)"
  decorate_1_from        = "class-validator"
  decorate_1_name        = IsOptional
  decorate_1_arguments   = "[]"
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/@generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Reason {
  PRIVATE
  OFFENSIVE
  TABOO
  OTHER
}

enum Role {
  ADMIN
  USER
  GUEST
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

// model Region {
//   id         Int     @id @default(autoincrement())
//   name       String  @unique
//   address    String?
//   postalCode Int?
//   users      User[]
// }

model User {
  id              Int       @id @default(autoincrement())
  /// @Validator.MinLength(3)
  username        String    @unique @db.VarChar(255)
  /// @Validator.IsEmail()
  email           String    @unique @db.VarChar(255)
  // TODO: @Validator.MinLength(8)
  // TODO: @Validator.MaxLength(15)
  password        String?
  name            String?
  role            Role      @default(USER)
  isU18           Boolean   @default(true)
  profilePicture  String?
  gender          String?
  accountLanguage String    @default("en")
  emailVerified   Boolean   @default(false)
  dateOfBirth     DateTime?
  createdAt       DateTime  @default(dbgenerated("NOW()"))
  updatedAt       DateTime  @default(dbgenerated("NOW()"))
  googleId        String?   @unique
  googleProfile   Json?
  posts           Post[]
  likedPosts      Post[]    @relation("UserLikedPosts")
  dislikedPosts   Post[]    @relation("UserDislikedPosts")
  country         Country?  @relation(fields: [countryId], references: [id])
  countryId       Int?
  flags           Flag[]
}

model Post {
  id             Int      @id @default(autoincrement())
  titleArabic    String
  titleLatin     String
  contentArabic  String
  contentEnglish String
  contentFrench  String
  published      Boolean? @default(false)
  likesCount     Int      @default(1)
  dislikesCount  Int      @default(0)
  author         User     @relation(fields: [authorId], references: [id])
  authorId       Int
  isU18          Boolean  @default(true)
  createdAt      DateTime @default(dbgenerated("NOW()"))
  updatedAt      DateTime @default(dbgenerated("NOW()"))
  // tags           Tag[]
  flags          Flag[]
  example        Example?
  likedBy        User[]   @relation("UserLikedPosts")
  dislikedBy     User[]   @relation("UserDislikedPosts")
}

// model Tag {
//   id      Int    @id @default(autoincrement())
//   name    String @unique
//   post    Post?  @relation(fields: [postId], references: [id])
//   postId Int?
// }

model Example {
  id             Int      @id @default(autoincrement())
  contentArabic  String
  contentEnglish String
  contentFrench  String
  post           Post     @relation(fields: [postId], references: [id])
  postId         Int      @unique
  createdAt      DateTime @default(dbgenerated("NOW()"))
  updatedAt      DateTime @default(dbgenerated("NOW()"))
}

model Flag {
  id        Int      @id @default(autoincrement())
  reason    Reason
  content   String?
  Post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(dbgenerated("NOW()"))
}
