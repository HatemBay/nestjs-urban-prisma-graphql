scalar DateTime

type Post {
  id: Int!
  author: User
  authorId: Int!
  titleArabic: String!
  titleLatin: String
  contentArabic: String!
  contentEnglish: String
  contentFrench: String
  published: Boolean
  isU18: Boolean
  likesCount: Int
  dislikesCount: Int
  example: Example
  createdAt: DateTime!
  updatedAt: DateTime!
  likedBy: [User]
  dislikedBy: [User]
}

type PaginatedPosts {
  pagination: PaginationOptions!
  data: [Post]!
}

type PaginationOptions {
  totalCount: Int!
}

input PaginationParams {
  page: Int
  take: Int
  filter: String
}

input CreatePostInput {
  titleArabic: String!
  titleLatin: String
  contentArabic: String!
  contentEnglish: String
  contentFrench: String
  isU18: Boolean
  likedBy: [FindUserInput!]
}

input UpdatePostInput {
  titleArabic: String
  titleLatin: String
  contentArabic: String
  contentEnglish: String
  contentFrench: String
  likesCount: Int
  dislikesCount: Int
  likedBy: [FindUserInput!]
  dislikedBy: [FindUserInput!]
}

input ReactToPostInput {
  likesCount: Int
  dislikesCount: Int
  likedBy: [FindUserInput!]
  dislikedBy: [FindUserInput!]
}

input FindPostInput {
  id: Int!
}

input OrderByParams {
  field: String
  direction: String
}

type Query {
  posts(
    orderBy: OrderByParams
    pagination: PaginationParams
    randomize: Boolean
    authorId: Int
  ): PaginatedPosts!
  post(id: Int!): Post
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(
    findPostInput: FindPostInput!
    updatePostInput: UpdatePostInput!
  ): Post!
  removePost(findPostInput: FindPostInput!): Post
  likePost(findPostInput: FindPostInput!): Post
  unlikePost(findPostInput: FindPostInput!): Post
  dislikePost(findPostInput: FindPostInput!): Post
  undislikePost(findPostInput: FindPostInput!): Post
}
