scalar DateTime
scalar JSON

type User {
  id: Int!
  username: String!
  email: String!
  password: String
  name: String
  role: Role
  isU18: Boolean
  profilePicture: String
  gender: String
  accountLanguage: String
  emailVerified: Boolean
  dateOfBirth: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post]
  country: Country
  countryId: Int
  googleId: String
  googleProfile: JSON
  likedPosts: [Post]
  dislikedPosts: [Post]
}

input CreateUserInput {
  username: String!
  email: String!
  password: String
  name: String
  role: Role
  isU18: Boolean
  profilePicture: String
  gender: String
  accountLanguage: String
  emailVerified: Boolean
  dateOfBirth: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  googleId: String
  googleProfile: JSON
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  name: String
  role: Role
  profilePicture: String
  gender: String
  accountLanguage: String
  emailVerified: Boolean
  isU18: Boolean
  dateOfBirth: DateTime
  countryId: Int
  updatedAt: DateTime
  googleId: String
  googleProfile: JSON
  likedPosts: [FindPostInput]
  dislikedPosts: [FindPostInput]
}

type LoginResponse {
  accessToken: String!
  user: UserLoginResponse!
}

type UserLoginResponse {
  id: Int!
  username: String!
  email: String!
  password: String
  name: String
  role: Role
  isU18: Boolean
  profilePicture: String
  gender: String
  accountLanguage: String
  emailVerified: Boolean
  dateOfBirth: DateTime
  country: Country
  createdAt: DateTime!
  updatedAt: DateTime!
  googleId: String
  googleProfile: JSON
}

input LoginUserInput {
  username: String!
  password: String!
}

input FindUserInput {
  id: Int
  username: String
  email: String
  googleId: String
}

input GoogleAuthInput {
  email: String
}

type Query {
  # orderBy and pagination are defined in the posts section
  users(orderBy: OrderByParams, pagination: PaginationParams): [User]!
  user(findUserInput: FindUserInput!): User
}

type Mutation {
  login(LoginUserInput: LoginUserInput!): LoginResponse!
  signup(createUserInput: CreateUserInput!): User!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(
    findUserInput: FindUserInput!
    updateUserInput: UpdateUserInput!
  ): User!
  removeUser(findUserInput: FindUserInput!): User
  googleAuth(googleAuthInput: GoogleAuthInput!): LoginResponse!
}

enum Role {
  ADMIN
  USER
  GUEST
}
